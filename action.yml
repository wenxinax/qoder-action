
name: 'Qoder Action'
description: 'A flexible and composable GitHub Action framework for qoder-cli.'
author: 'qoder-ai'

inputs:
  scene:
    description: |
      The scenario for the action, determining built-in prompts and logic.
      - `cr`: Code Review mode. Uses built-in prompts for code analysis. Allows customization via `append_prompt`.
      - `mention`: Mention mode. Responds to user mentions in comments. Allows customization of reply style via `append_prompt`.
      - `custom`: Custom mode. Requires a `prompt` to define the task, and allows a custom `system_prompt`.
    required: true
    default: 'cr'

  append_prompt:
    description: 'For `cr` or `mention` scenes. Appends additional instructions to the built-in prompt.'
    required: false

  prompt:
    description: "Required for `custom` scene. A detailed prompt that tells qoder what to do."
    required: false
  system_prompt:
    description: "Optional for `custom` scene. A system prompt to guide the model's behavior. A default is used if not provided."
    required: false

  github_token:
    description: 'The GitHub token for authentication.'
    required: true
    default: ${{ github.token }}

  dashscope_api_key:
    description: 'The Dashscope API key for LLM services.'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Dispatcher
      id: dispatcher
      # Execute the compiled dispatcher script directly instead of calling the action recursively
      run: node ${{ github.action_path }}/dist/dispatcher.js
      shell: bash
      env:
        INPUT_SCENE: ${{ inputs.scene }}
        INPUT_APPEND_PROMPT: ${{ inputs.append_prompt }}
        INPUT_PROMPT: ${{ inputs.prompt }}
        INPUT_SYSTEM_PROMPT: ${{ inputs.system_prompt }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        
    - name: Setup Global Git Authentication
      run: |
        echo "Setting up global git authentication..."
        # Clear existing configs
        git config --global --unset-all credential.helper || true
        git config --global --unset-all url."https://github.com/".insteadOf || true
        # Set new config
        git config --global url."https://x-access-token:${{ steps.dispatcher.outputs.oidc_token }}@github.com/".insteadOf "https://github.com/"
        git config --global user.name "qoder-action"
        git config --global user.email "qoder-action@github.com"
        # Export environment variables for subsequent steps
        echo "GITHUB_TOKEN=${{ steps.dispatcher.outputs.oidc_token }}" >> $GITHUB_ENV
        echo "GH_TOKEN=${{ steps.dispatcher.outputs.oidc_token }}" >> $GITHUB_ENV
        echo "GIT_USERNAME=x-access-token" >> $GITHUB_ENV
        echo "GIT_PASSWORD=${{ steps.dispatcher.outputs.oidc_token }}" >> $GITHUB_ENV
        # Clear GitHub Actions default tokens
        echo "ACTIONS_RUNTIME_TOKEN=" >> $GITHUB_ENV
        echo "ACTIONS_ID_TOKEN_REQUEST_TOKEN=" >> $GITHUB_ENV
        echo "ACTIONS_ID_TOKEN_REQUEST_URL=" >> $GITHUB_ENV
      shell: bash

    - name: Debug Dispatcher Outputs
      run: echo "Dispatcher oidc_token is ${{ steps.dispatcher.outputs.oidc_token }}"
      shell: bash

    - name: Run Qoder Core Action
      id: qoder
      uses: wenxinax/qoder-core-action@main
      with:
        system_prompt_path: ${{ steps.dispatcher.outputs.system_prompt_path }}
        prompt_path: ${{ steps.dispatcher.outputs.prompt_path }}
        config: ${{ steps.dispatcher.outputs.qoder_config_json }}
        dashscope_api_key: ${{ inputs.dashscope_api_key }}
        oidc_token: ${{ steps.dispatcher.outputs.oidc_token }}

    - name: Finalize
      id: finalize
      if: always()
      # Execute the compiled finalize script directly
      run: node ${{ github.action_path }}/dist/finalize.js
      shell: bash
      env:
        INPUT_SCENE: ${{ inputs.scene }}
        INPUT_COMMENT_ID: ${{ steps.dispatcher.outputs.comment_id }}
        INPUT_JOB_STATUS: ${{ job.status }}
        INPUT_QODER_RESULT: ${{ steps.qoder.outputs.result }}
        INPUT_GITHUB_TOKEN: ${{ steps.dispatcher.outputs.oidc_token }}
        INPUT_COMMENT_TYPE: ${{ steps.dispatcher.outputs.comment_type }}
