
name: 'Qoder Action'
description: 'A flexible and composable GitHub Action framework for qoder-cli.'
author: 'qoder-ai'

inputs:
  scene:
    description: |
      The scenario for the action, determining built-in prompts and logic.
      - `cr`: Code Review mode. Uses built-in prompts for code analysis. Allows customization via `append_prompt`.
      - `mention`: Mention mode. Responds to user mentions in comments. Allows customization of reply style via `append_prompt`.
      - `custom`: Custom mode. Requires a `prompt` to define the task, and allows a custom `system_prompt`.
    required: true
    default: 'cr'

  append_prompt:
    description: 'For `cr` or `mention` scenes. Appends additional instructions to the built-in prompt.'
    required: false

  prompt:
    description: "Required for `custom` scene. A detailed prompt that tells qoder what to do."
    required: false
  system_prompt:
    description: "Optional for `custom` scene. A system prompt to guide the model's behavior. A default is used if not provided."
    required: false


  dashscope_api_key:
    description: 'The Dashscope API key for LLM services.'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Dispatcher
      id: dispatcher
      # Execute the compiled dispatcher script directly instead of calling the action recursively
      run: node ${{ github.action_path }}/dist/dispatcher.js
      shell: bash
      env:
        INPUT_SCENE: ${{ inputs.scene }}
        INPUT_APPEND_PROMPT: ${{ inputs.append_prompt }}
        INPUT_PROMPT: ${{ inputs.prompt }}
        INPUT_SYSTEM_PROMPT: ${{ inputs.system_prompt }}
            
    - name: Verify that git uses *our* token
      env:
        MY_TOKEN: ${{ steps.dispatcher.outputs.github_token }}  
      shell: bash
      run: |
        set -e

        # ① 向 git 询问“对 https://github.com/ 用的是什么凭据”
        cred=$(printf "url=https://github.com\n" | git credential fill)

        # ② 解析出 git 返回的 password（如果没有说明没写进去）
        current_token=$(echo "$cred" | grep '^password=' | cut -d= -f2-)

        if [ -z "$current_token" ]; then
          echo "❌  git 里没有任何 Token，后续 step 会失败"; exit 1
        fi

        # ③ 和我们的 Token 比对（比对前 8~10 位即可；不打印整串）
        if [[ "${current_token:0:10}" == "${MY_TOKEN:0:10}" ]]; then
          echo "✅ git 使用的确实是我们的 Token"
        else
          echo "❌ git 用的不是我们想要的 Token"; exit 1
        fi

    - name: Run Qoder Core Action
      id: qoder
      uses: wenxinax/qoder-core-action@main
      with:
        system_prompt_path: ${{ steps.dispatcher.outputs.system_prompt_path }}
        prompt_path: ${{ steps.dispatcher.outputs.prompt_path }}
        config: ${{ steps.dispatcher.outputs.qoder_config_json }}
        dashscope_api_key: ${{ inputs.dashscope_api_key }}
        github_token: ${{ steps.dispatcher.outputs.github_token }}

    - name: Finalize
      id: finalize
      if: always()
      # Execute the compiled finalize script directly
      run: node ${{ github.action_path }}/dist/finalize.js
      shell: bash
      env:
        INPUT_SCENE: ${{ inputs.scene }}
        INPUT_COMMENT_ID: ${{ steps.dispatcher.outputs.comment_id }}
        INPUT_JOB_STATUS: ${{ job.status }}
        INPUT_QODER_RESULT: ${{ steps.qoder.outputs.result }}
        INPUT_GITHUB_TOKEN: ${{ steps.dispatcher.outputs.github_token }}
        INPUT_COMMENT_TYPE: ${{ steps.dispatcher.outputs.comment_type }}
